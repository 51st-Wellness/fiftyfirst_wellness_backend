// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User represents a user of the platform, including B2C clients and B2B admins.
// The role field allows for Role-Based Access Control (RBA).
enum UserRole {
  USER
  ADMIN
  COACH
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  password       String
  firstName      String
  lastName       String
  phone          String
  role           UserRole  @default(USER)
  city           String?
  address        String?
  bio            String?
  profilePicture String?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  //relations
  passwordResetOTP PasswordResetOTP?
  orders           Order[]
  aiConversations  AIConversation[]
  cart             CartItem[]
  bookmarks        Bookmark[]
  Review           Review[]
}

// Password reset OTP model for secure password resets
model PasswordResetOTP {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// AIConversation stores the history of user interactions with the AI service.
model AIConversation {
  id        String   @id @default(cuid())
  userId    String
  title     String
  messages  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations
  user User @relation(fields: [userId], references: [id])
}

// Product represents both physical and digital products for sale.

enum ProductType {
  STORE
  PROGRAMME
  PODCAST
}

model Product {
  id        String      @id @default(cuid())
  type      ProductType
  storeItem StoreItem?
  programme Programme?
  podcast   Podcast?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  //relations
  orderItems OrderItem[]
  CartItem   CartItem[]
  bookmarks  Bookmark[]
  Review     Review[]
}

model StoreItem {
  name        String
  description String?
  productId   String   @id @unique
  product     Product  @relation(fields: [productId], references: [id])
  price       Float
  stock       Int      @default(0)
  display     Json // {url: string, type: image/video}
  images      Json // [string] -> just the url of the image
  tags        Json // [string]
  isFeatured  Boolean  @default(false)
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Programme represents webineers (just a formal name)
model Programme {
  productId   String  @id @unique
  title       String
  description String?
  product     Product @relation(fields: [productId], references: [id])

  muxAssetId    String  @unique
  muxPlaybackId String  @unique
  isPublished   Boolean @default(true)
  isPremium     Boolean @default(false)
  isFeatured    Boolean @default(false)
  duration      Int // in seconds

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Podcast represents audio or video podcast episodes.
model Podcast {
  productId     String  @id @unique
  title         String
  description   String?
  muxAssetId    String  @unique
  muxPlaybackId String  @unique
  isPublished   Boolean @default(true)
  isFeatured    Boolean @default(false)
  isPremium     Boolean @default(false)
  duration      Int // in seconds

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
}

// Order represents a user's purchase.
model Order {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  status      PaymentStatus @default(PENDING)
  totalAmount Float
  paymentId   String?       @unique
  orderItems  OrderItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// OrderItem links an order to the products within it.
model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Review {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Int // 1-10
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blogs {
  id          String   @id @default(cuid())
  title       String
  contentKey  String //storage bucket file key
  isFeatured  Boolean  @default(false)
  isPublished Boolean  @default(true)
  tags        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
}

model Bookmark {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
}
